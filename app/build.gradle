apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.application'
apply plugin: 'retrolambda'
apply plugin: 'io.fabric'

task askForPasswords << {
    android.signingConfigs.release.storeFile = file(STORE)
    android.signingConfigs.release.keyAlias = ALIAS
    android.signingConfigs.release.storePassword = STORE_PASSWORD
    android.signingConfigs.release.keyPassword = KEY_PASSWORD
    if(android.signingConfigs.release.keyPassword == null){
        android.signingConfigs.release.storePassword = new String(System.console().readPassword('\n\nKeystore ' + android.signingConfigs.release.storeFile + ' password: '))
    }
    if(android.signingConfigs.release.keyPassword == null){
        android.signingConfigs.release.keyPassword = new String(System.console().readPassword('\nKey ' + android.signingConfigs.release.keyAlias + ' password: '))
    }
}

tasks.withType(com.android.build.gradle.tasks.PackageApplication).whenTaskAdded { task ->
    if (!task.name.endsWith('Debug') && !task.name.endsWith('Test')) {
        task.dependsOn 'askForPasswords'
    }
}

android {
    compileSdkVersion 21
    buildToolsVersion '21.1.1'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    def Properties versionProps = new Properties()
    versionProps.load(new FileInputStream(file('version.properties')))
    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 21
        versionCode versionProps['code'].toInteger()
        versionName versionProps['name']
        buildConfigField 'String', 'FLICKR_API_KEY', '"' + FLICKR_API_KEY + '"'
        buildConfigField 'String', 'FLICKR_API_SECRET', '"' + FLICKR_API_SECRET + '"'
    }

    signingConfigs {
        release {
            storeFile file('/dev/null')
            storePassword ''
            keyAlias ''
            keyPassword ''
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix ' debug'
        }

        release {
            debuggable false
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), file('proguard-rules.txt')
            zipAlignEnabled true
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
}

dependencies {
    compile 'com.google.android.apps.muzei:muzei-api:1.0'
    compile 'com.squareup.retrofit:retrofit:1.8.0'
    compile('com.crashlytics.sdk.android:crashlytics:2.1.0@aar') {
        transitive = true;
    }
}
